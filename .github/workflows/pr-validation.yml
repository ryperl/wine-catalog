name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run secret detection (PR)
      if: github.event_name == 'pull_request'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --debug --only-verified

    - name: Run secret detection (Push)
      if: github.event_name == 'push'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --debug --only-verified

    - name: Run secret detection (Fallback - Full Scan)
      if: github.event.before == '0000000000000000000000000000000000000000' || github.event.before == ''
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified --since-commit=HEAD~1      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'package*.json'
  push:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests & Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.20.8]
        
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      working-directory: ./
      run: npm ci

    - name: Run TypeScript type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test

    - name: Generate test coverage
      run: npm run test -- --coverage
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

    - name: Check for security vulnerabilities
      run: npm audit --audit-level moderate

  security-scan:
    name: Security & Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v3

  build-test:
    name: Build & Integration Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.20.8
      uses: actions/setup-node@v4
      with:
        node-version: 18.20.8
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install backend dependencies
      working-directory: ./
      run: npm ci

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        for i in {1..30}; do
          if mongosh "mongodb://testuser:testpass@localhost:27017/wine-catalog-test?authSource=admin" --eval "db.runCommand('ping')" >/dev/null 2>&1; then # secret-ignore
            echo "✅ MongoDB is ready after ${i} seconds"
            break
          fi
          echo "Waiting for MongoDB... (${i}/30)"
          sleep 1
        done

    - name: Create environment file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=production" > .env
        echo "MONGODB_URI=mongodb://testuser:testpass@localhost:27017/wine-catalog-test?authSource=admin" >> .env # secret-ignore
        echo "JWT_SECRET=test-jwt-secret-for-ci-only" >> .env
        echo "PORT=3001" >> .env

    - name: Debug environment
      working-directory: ./backend
      run: |
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        echo "Dist directory:"
        ls -la dist/ || echo "No dist directory found"
        echo "Environment variables:"
        env | grep -E "(NODE_ENV|PORT|MONGODB_URI)" || echo "No relevant env vars found"
        echo "Package.json scripts:"
        cat package.json | grep -A 10 '"scripts"'

    - name: Start backend server
      working-directory: ./backend
      run: |
        echo "Starting backend server..."
        
        # Check if dist/src/server.js exists
        if [ ! -f "dist/src/server.js" ]; then
          echo "❌ dist/src/server.js not found! Build may have failed."
          echo "Contents of dist directory:"
          ls -la dist/ || echo "No dist directory"
          if [ -d "dist/src" ]; then
            echo "Contents of dist/src directory:"
            ls -la dist/src/
          fi
          exit 1
        fi
        
        echo "✅ Built server found, starting..."
        
        # Start server with explicit output
        timeout 60s npm start &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to be ready (up to 30 seconds)
        for i in {1..30}; do
          if curl -s http://localhost:3001/api/health >/dev/null 2>&1; then
            echo "✅ Server is ready after ${i} seconds"
            exit 0
          fi
          
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Server process died"
            exit 1
          fi
          
          echo "Waiting for server... (${i}/30)"
          sleep 2
        done
        
        echo "❌ Server failed to start within 60 seconds"
        exit 1
      env:
        NODE_ENV: production
        PORT: 3001

    - name: Verify server is running
      run: |
        echo "Final health check..."
        curl -f http://localhost:3001/api/health
        echo "✅ Server is healthy and responding"

    - name: Run integration tests
      working-directory: ./backend
      run: npm test -- --testPathPattern="integration"
      env:
        NODE_ENV: test
        API_URL: http://localhost:3001

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.20.8
      uses: actions/setup-node@v4
      with:
        node-version: 18.20.8

    - name: Install dependencies
      working-directory: ./
      run: npm ci

    - name: Check for vulnerable dependencies
      run: |
        cd backend
        npm audit --audit-level high
        cd ..
        npx audit-ci --high

    - name: Check for outdated dependencies
      run: |
        cd backend
        npm outdated || true

  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check commit messages
      uses: wagoid/commitlint-github-action@v5
      with:
        configFile: .commitlintrc.json

    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for breaking changes
      run: |
        git diff origin/main...HEAD --name-only | grep -E "(package\.json|tsconfig\.json|\.env\.example)" && echo "⚠️ Configuration files changed" || echo "✅ No config changes"

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, security-scan, build-test, dependency-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.backend-tests.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" && 
              "${{ needs.dependency-check.result }}" == "success" ]]; then
          echo "✅ All validation checks passed!"
          exit 0
        else
          echo "❌ Some validation checks failed"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          exit 1
        fi
